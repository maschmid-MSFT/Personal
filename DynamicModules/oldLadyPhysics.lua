-- This file is for use with Corona Game Edition
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

module(...)

function physicsData(scale)
	local physics = { data =
	{ 
		["object"] = {
			
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   -12.5, -12.5  ,  -14, -9  ,  -14.5, -13.5  ,  -13, -15  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   15.5, 11.5  ,  23.5, -2.5  ,  21.5, 21.5  ,  13.5, 19.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   10.5, -8.5  ,  -12.5, -12.5  ,  -3, -23  ,  9, -20  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   15.5, 11.5  ,  10.5, -8.5  ,  17, -8  ,  23.5, -2.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   -24.5, 3.5  ,  -21.5, -4.5  ,  -14, -9  ,  11.5, 11.5  ,  -19.5, 14.5  ,  -24.5, 11.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   15.5, 11.5  ,  11.5, 11.5  ,  -14, -9  ,  -12.5, -12.5  ,  10.5, -8.5  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0,
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   -22, 22  ,  -19.5, 14.5  ,  11.5, 11.5  ,  10, 21  }
				}  
		}
		
	} }

	-- apply scale factor
	local s = scale or 1.0
	for bi,body in pairs(physics.data) do
		for fi,fixture in ipairs(body) do
			for ci,coordinate in ipairs(fixture.shape) do
				fixture.shape[ci] = s * coordinate
			end
		end
	end
	
	function physics:get(name)
		return unpack(self.data[name])
	end
	
	return physics;
end


